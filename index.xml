<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Random Forest</title>
    <link>https://chswei.github.io/</link>
    <description>Recent content on Random Forest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <copyright>Copyright © 2021</copyright>
    <lastBuildDate>Tue, 27 Jul 2021 21:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://chswei.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>醫師二階國考考古題 Anki 卡片</title>
      <link>https://chswei.github.io/post/medicine/md-exam-anki/</link>
      <pubDate>Tue, 27 Jul 2021 21:00:00 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/medicine/md-exam-anki/</guid>
      <description>今年二階國考在歷經疫情延期和颱風攪局，最後總算是順利通過了。這次考試我採用了考古題戰術，在念完 FC (主要是內科、婦產科和一些小科) 後，剩下的時間都投入考古，並把考點做成 Anki 卡片，然後反覆一直看。準備期間也將 Anki Deck 分享給兩三個同學，事後看起來還算滿成功的。以前寫過一篇關於讀書方法的文章，但都沒有實際長期使用 Anki，這次也算是個實驗吧，也將 Deck 分享出來，供需要的人參考。</description>
    </item>
    
    <item>
      <title>在學重考心得</title>
      <link>https://chswei.github.io/post/miscellany/resit/</link>
      <pubDate>Tue, 14 Apr 2020 23:10:03 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/miscellany/resit/</guid>
      <description>突然想到以前重考時的心得，當初是同學幫我 po 在 ptt 上，想說也把它放在這裡好了。之後也很幸運地幫助了某位學弟。
（寫於 2015/08/23）
因為許多人的幫助與支持，小弟幸運地重考上了醫學系。在學重考是條艱辛的路，因此希望藉由這篇文章，讓有心走上這條路的人有個參考的方向。
先說明一下背景，我在高中是三類組的，目標是醫學或中醫系(不考慮牙醫)。應屆指考成績不甚理想，分數在中醫系邊緣。在醫科的志願後，我填了台大財金。為什麼呢？由於國文、英文、數乙考得不錯，雖然自己從來沒想過要念財金，但考慮到未來出路頗佳，又是許多人夢寐以求的科系，就姑且試試看。然而放榜那一天看到自己與中醫系以 0.3 分失之交臂時，心中仍是不太甘心，萌生了重考的念頭。選擇在學重考的原因如下:
 我不喜歡重考班枯燥的生活方式。 想換個環境念書。 能在台大學習實在是個不可多得的好機會。   關於在學重考，我想分作以下幾點來討論:
反省 準備在學重考前，最重要的一件事就是找出大考成績不理想的原因。像我認為自己考糟的原因最主要是「壓力太大」和「太容易緊張」，這也是我為何選擇在學重考的原因。在大學中，有許多事物能夠分散注意力，不至於整天都在高壓的環境下複習那些讀過好幾遍的課本知識。反省看似簡單，但它實實在在是重考成敗的關鍵，否則也只是白白浪費一年罷了。
複習 由於我複習的過程不算很有系統，且念書的方法和參考書因人而異，所以就不分享各科怎麼念。我想稍微討論「學測複習」與「大學課業」的時間分配。
平常我都在複習學測，只有班上小考和期中期末考的前一週會拿出課本來念。話雖如此，小考幾乎是每個禮拜都有，再加上繁多的報告，時間真的不夠用，所以要如何分配時間是在學重考的關鍵。
對我來說。由於自認為高三已經複習得很扎實，大考失利純粹是因為心理壓力，所以我的目標只是在這幾個月中維持先前的水準。通常我是用”寫題目”的方式來決定兩者時間的分配。學測模擬試題寫得不順時，就花多一點時間在”學測複習”，並回過頭翻參考書；寫得順時，就可以多念一點大學課業。總而言之，我認為只要不忘記自己重考的決心，知道自己在做什麼並堅持下去，學測複習與大學課業之間的時間分配一定會自行達到平衡的。
(大學課業可顧可不顧，但我無法接受被當的感覺，所以算是滿認真地念。一學年下來，我在系上 122 人當中，排名第 10，證明人是有無窮潛力的!如果不打算顧大學課業的，這部分就自行略過吧。)
活動 開學前參加了迎新宿營，之後就幾乎沒參加系上活動了。倘若行有餘力的話，我覺得參加一些活動也不無好處，可以多認識同學，又可以在這一年中增添難忘的回憶，但一定要適時評估自己的讀書進度，不要忘了真正該做的事。
朋友 在學重考的事，我本來是打算默默進行，除了室友外(畢竟我都在宿舍念書，告知了比較方便)，不打算跟系上的人透露，因為萬一重考失敗，會有點尷尬與難堪。但開學後，我和少數幾個系上同學變得特別熟，因此閒聊的時候把這件事說了出來。我一直覺得我做對了，因為重考的這一年中，他們的鼓勵和解悶是我能夠撐下去的原因之一。
獨處 重考生很多，但在學重考占的比例不高，因此身邊幾乎不會出現志同道合的同學。如果無法忍受他人玩樂時，自己卻要在宿舍或圖書館寂寞念書的人，千萬別嘗試在學重考，因為真的很痛苦。
申請 學測考得還不錯，因此我決定申請看看，畢竟指考物、化、生難度提高許多，對於幾個月來一直在念會計學、經濟學的我來說有點困難。但我沒有辦休學，而是一邊繼續念大學，一邊準備備審和面試。
這個決定有好有壞，壞的是:因為我是個不太會說話的人，又要上課而沒時間練好面試，準備得不太充分，導致最後成績亂七八糟；好的是:我在台大的最後一學期修到許多自己感興趣的課(假如我申請失敗，這個好處恐怕讓人開心不起來)。申請入學這部分，我做得很失敗。除非對面試有十足的自信，我覺得還是休學準備比較好，找時間回到母校和學弟妹一起練習總比孤軍奮戰來得輕鬆。
在學重考其實是個很大的賭注，為了準備考試，勢必要放棄許多活動。倘若重考成功，並不會有任何損失，因為你會重新擁有大一生活，甚至還得到這難能可貴的一年；但假如失敗了，大學生活等於只有三年，代價不小。因此對自身能力與程度沒有一定自信的人，盡量不要走上這條路。老實說，準備重考的幾個月中，我複習的時間和強度大概高三時的三、四成左右。所以能夠重考成功，真的只能說是以前基礎打得頗牢固加上運氣極佳罷了。
人生中遇到的任何經驗都是彌足珍貴的，重考的這一年當然也不例外。希望這篇能夠讓那些願意再給自己一次機會追逐夢想的人們一點幫助。</description>
    </item>
    
    <item>
      <title>寫在成為 Clerk 前</title>
      <link>https://chswei.github.io/post/medicine/preclerk/</link>
      <pubDate>Sat, 27 Jul 2019 17:43:21 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/medicine/preclerk/</guid>
      <description>剛考完一階醫師國考，再一個多月就要成為 Clerk 了。死讀書這麼長一段時間，如今即將進入臨床學習，總覺得有些無所適從。趁著這段空閒時間整理了過去幾年蒐集的前輩們的文章，希望之後對自己有些許幫助。
大方向  見實習的準備 給實習醫師的學習建議（2007） 內科clerkship要怎麼approach (1)：晨會 成為最強的路障 _ Clerk 醫院見習經驗分享 你一定要當路障嗎？－－KMU Clerk經驗分享 clerk生存之道 clerk要怎麼變強?  學習 Tips  如何將臨床瑣碎的知識建構成完整體系：Notion 用用表格神器，當醫生更有效率！ — Airtable之基本功能介紹（以醫學為例） 升臨床工作效率：把病人清單變成待辦清單 如何用Apple pencil跟查房？ 醫學卷姐哥們的筆記法 — a case series 用 station 電腦常常需要做筆記或存 paper，但登各家雲端硬碟很麻煩，尤其是有開二步驗證時。另方面又有被盜帳的風險。這時可以開一個 google doc 文件，然後開連結共享編輯，接著到 bit.ly 去縮網址。  書籍  Approach to Clerkship (3)：參考書 — 內外婦兒與各科通用 Clerk 內科書單 想請問哪些臨床用書對於clerk有幫助?-1 想請問哪些臨床用書對於clerk有幫助?-2  網站  醫學生的自學學習資源列表 — QD服用 關於幾個不錯的原文書和期刊搜尋方式 推薦好用的期刊或資料庫 常用醫學網站推薦 醫學影像教學線上網站-1 醫學影像教學線上網站-2  Apps  Medscape UpToDate Dynamed Plus MDCalc Drugs.</description>
    </item>
    
    <item>
      <title>使用 Hackmd 製作系上共筆的可行性？</title>
      <link>https://chswei.github.io/post/medicine/mutual-note/</link>
      <pubDate>Sat, 12 Jan 2019 17:36:30 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/medicine/mutual-note/</guid>
      <description>前幾天排版共筆排得很煩躁，腦中突然冒出用 Hackmd 製作系上共筆的想法。網上搜尋了一下，發現沒有人寫類似的文章（大概也沒有人會公布自己系上製作共筆的方式吧，除了以前黃豆泥學長有推廣過使用 Google Docs 製作共筆）。所以趁著整合考剛結束，理了一下想法，順手打下。
什麼是共筆？ 共筆，共同筆記，由一群人共同製作的筆記。據我所知，其實不只有醫學系有這個制度，法律系以及一些會議、演講也都會製作共筆，方便同學和與會者共享知識內容 (像是使用下面提到的 Hackmd)。
目前我們系上製作共筆的流程如下：組員 → 組長 → 組頭 → 學藝 。 老師上完課後，由五到六個組員將投影片內容製作成共筆，接著組長排版、組頭審核內容，最後交給學藝進行最終把關並送印。
什麼是 Hackmd？ 其實有點類似 Google Docs，同樣提供線上協作的文字編輯服務，但最大的不同點在於 Hackmd 使用了 Markdown 語法進行文件的撰寫。
那什麼是 Markdown？
 Markdown 是一種輕量級標記式語言，它允許人們「使用易讀易寫的純文字格式編寫文件，然後轉換成有效的 XHTML（或者 HTML）文件」。
 這是維基百科上對於 Markdown 的介紹，重點就在於「易讀易寫」這四個字。我們可以使用一些簡單的符號輕鬆建立一篇排版工整且易於閱讀的文件，手甚至不需要離開鍵盤。比起 Word 必須使用滑鼠點來點去進行版面的調整，Markdown 可說是節省許多時間與麻煩。有興趣的人可以參考這篇詳細的 Markdown 語法教學。
 補充：其實 Markdown 有很多種版本，例如 John Gruber 發明的原始版本和 Github-flavored Markdown (GFM) 等，不過最基本的功能都是一樣的。而 Hackmd 在最基本的 Markdown 功能之外，也有許多獨創的語法。
 使用 Hackmd 製作共筆的好處？ Word 是現今最為普遍使用的文書處理軟體，也是大多數人打文件的首選，系上的共筆製作當然也不例外。因為它太強大了，能夠使用很多複雜的功能，所以目前看來似乎沒有理由轉換成 Hackmd (Markdown)。
說來很不可置信，其實還是有很多同學對於 Word 的功能不太熟悉，例如不會設定編號、不會調整圖文的版面配置等，也導致組長需要花費很多時間調整排版。雖然現在大多數的共筆都是修改自學長姐的檔案，版面不太需要調整，因此問題不大。但有時候老師一換，必須從零開始製作時，排版工作真的是一大災難。假如我們使用 Hackmd，整個製作流程也許可以更輕鬆寫意。</description>
    </item>
    
    <item>
      <title>實用 Mac Apps 推薦</title>
      <link>https://chswei.github.io/post/miscellany/mac-apps/</link>
      <pubDate>Sun, 23 Sep 2018 23:32:18 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/miscellany/mac-apps/</guid>
      <description>從 Windows 轉換到 MacOS 剛滿三個月，大多適應良好，系統介面、鍵盤配置和 trackpad 手勢等都能很快上手。這段期間也探索了許多 Apps，推薦列表如下：
1. 生產力工具    名稱 簡介     Alfred 必裝神器！類似 Spotlight 的軟體，但功能遠遠不止這樣。它能讓你大大減少離開來回鍵盤和觸控板的時間，詳細教學可以參考這篇教學。   Evernote 知名筆記軟體，應該不用多說，電腦玩物部落格上有許多使用訣竅。   ‎Notability 筆記軟體，我主要用來匯入 PDF 製作上課筆記。不過此軟體還是 iPad 配合 Apple Pencil 效果最佳。   Bear 我的寫作主力軟體，UI 乾淨漂亮，且支援 Markdown 語法。可參考這篇的介紹。   Ticktick 待辦清單軟體，免費版的功能就很齊全了，且 Windows、Mac、Android、iOS 都能下載，同步很方便。也有很多人推薦 Things 這個軟體，但有點貴&amp;hellip;    2. 系統管理工具    名稱 簡介     Homebrew 套件管理工具，讓你可以用一句指令來安裝軟體或套件，極為方便。嚴格來說不是 App，但還是列在這邊讓各位參考。   coconutBattery 查看電池健康度。   Macs Fan Control 風扇控制軟體，同時也可查看機身各個部位的溫度。   Magnet 分割視窗軟體，最棒的是它支援「拖曳視窗到螢幕邊界後會自動分割」的功能。   AppCleaner 平時若要刪除肥大的軟體 (如 Adobe) 時，可能會有刪除不乾淨的情況。而 AppCleaner 就是最好解決的方法。   Amphetamine 在一段時間內，防止電腦進入睡眠狀態。    3.</description>
    </item>
    
    <item>
      <title>周易哲學</title>
      <link>https://chswei.github.io/post/miscellany/zhou-yi/</link>
      <pubDate>Tue, 04 Sep 2018 18:16:08 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/miscellany/zhou-yi/</guid>
      <description>最近打算重新開始學習易經。以前曾經使用的參考書籍是「樂天知命：傅佩榮談《易經》」、「易經解讀：新世紀繼往開來的思想經典」這兩本，要拿出來翻翻了。
大概是受國中的國文老師影響，一直都很喜歡中國的歷史和傳統文化，也可以說是崇古吧，總之三年前在台大時修了一些如今看來很神奇的課，像是「周易哲學」、「太極拳」和「氣功」。說來也真是幸運，周易哲學剛好是哲學系知名的國學大師傅佩榮教授退休前開的最後一門課，能一瞻大師風采也算不虛此行了。
研究易經一般可分為「易理」和「象數」兩個部分，兩者不可偏廢。但以往我都只有使用象數進行占卦，甚少鑽研易理，這樣其實有點邪門歪道。俗話說：「善為易者不占。」是因為懂得易理之後就能運用己身的智慧去應對周圍事物的變化。也因此，最近才想要重新學習易經，期許自己能持續精進德性。
（Btw，有人看到易經或占卦這些字眼可能會覺得是迷信或不科學。我只能說，每個人都有自己相信的事物和信念，沒有必要去否定你不了解的事情，除非你有真的深入了解它。）</description>
    </item>
    
    <item>
      <title>Enpass 和 SizeUp</title>
      <link>https://chswei.github.io/post/miscellany/enpass-sizeup/</link>
      <pubDate>Fri, 24 Aug 2018 23:57:12 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/miscellany/enpass-sizeup/</guid>
      <description>Enpass 最近突然對網路資安起了警戒，所以在比較了 1password、LastPass 等密碼管理軟體後，最後選了 Enpass。有幾個主要原因：幾乎免費、預設 local 端儲存、好用的 Safari extension、優秀的同步支援。
SizeUp 對比 Windows 10 使用快捷鍵分割視窗， Mac 內建的 Split View 使用起來很麻煩且不直覺。網路上大多推薦 Moom、Magnet、BetterSnapTool，但都是付費軟體。雖然也不是不願意付錢，但基於能省則省的原則，最後找到了 SizeUp，完完全全符合我的需求。 (過程中有找到一個 Alfred 的 workflow，也能控制 layout，但似乎不是那麼完美)</description>
    </item>
    
    <item>
      <title>關於讀書方法</title>
      <link>https://chswei.github.io/post/medicine/study-methods/</link>
      <pubDate>Sat, 11 Aug 2018 17:52:21 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/medicine/study-methods/</guid>
      <description>還記得以前國中的時候老師要我上台跟同學分享讀書方法，當時說不出所以然，反正把課本多念幾遍就是了。這麼多年過去了，讀書方法一直沒什麼改變，考前預留一段足夠的時間開始複習，用螢光筆在課本或共筆上劃線做記號，有多餘的時間就做點筆記統整，然後至少把上課內容看兩遍，再寫寫考古題，成績就能保持在不錯的水準。因此也沒有特別想要去改進讀書方法。然而這種螢光筆劃線式的方法看似有效率，實際上內容完全沒有吸收進腦中，而且忘得很快，每次在生活中看到自己曾經學過的東西總會很興奮地跟旁人說「啊這個我學過耶」，但馬上又因為記憶模糊而支支吾吾地帶過，屢試不爽。
今年寒假在 Coursera 參加一門叫作 Learning How to Learn 的熱門課程，老師們以記憶形成的理論一步步教導該如何正確地學習，但後來我覺得講得太枯燥，所以並沒有看完所有的影片，也沒有認真應用在課業上 (好浪費XD)。然後最近發現一位叫作 Ali Abdaal 的 YouTuber。他是英國劍橋大學醫學院的學生，影片品質和可看度都還蠻高的，而其中一系列 Study Tips 的影片真的讓我獲益良多，尤其醫學背景對我來說更具參考價值。
這邊先列出影片中最重要的兩個方法：active recall 和 spaced repetition。
Active Recall   
Active Recall 顧名思義就是回想學習的內容。例如可以回想並總結今天所學的大架構是如何，然後這些大架構下面有哪些細節等。這種從大腦提取記憶的過程能讓記憶更牢固、更長久。一直以來因為我念書速度很慢，看完一個單元需要花很多時間，所以每次做完螢光筆的劃記就會懶得再耗神回想，但就是這種壞習慣讓我的記憶很不穩固，考完試就忘。
此外，也可以搭配畫簡圖、心智圖等方式進行 active recall，畢竟我們對於圖像記憶比較拿手，也順便讓自己在回想的時候理清思緒。但無論使用何種方式，重點都是在那提取記憶的過程。
Spaced Repetition   
Spaced Repetition (間隔重複) 其實就是耳熟能詳的遺忘曲線的應用。由於我們的短期記憶會隨著時間漸漸地遺忘，所以需要每隔一段時間進行複習來加強記憶，直到它成為長期記憶。結合前面說到的 active recall，我們可以每隔幾天就回想之前學過的內容 (而非重看螢光筆劃線的地方)，如此就能鞏固記憶。
有一些 App 可以幫助我們進行 spaced repetition (如 Anki 和 Quizlet)，其中 Anki 是 Ali 極其推薦的，有興趣的人可以搜尋看看。
這兩個讀書方法的好處在於不需要任何訓練，人人都可以很快上手，而且它們是從記憶的形成原理著手，所以適用於任何科目。So why not give it a try?</description>
    </item>
    
    <item>
      <title>新篇章</title>
      <link>https://chswei.github.io/post/miscellany/new-chapter/</link>
      <pubDate>Sun, 05 Aug 2018 23:40:59 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/miscellany/new-chapter/</guid>
      <description>最近生活有一些想法和心得，但還不到寫成完整文章的程度，又不適合放在 Twitter，所以有了寫短篇日記的念頭。每篇可能幾十個字之類的，希望這個方式能讓自己比較有動力寫下去，畢竟長文寫起來很累啊！</description>
    </item>
    
    <item>
      <title>在 GitHub 部署 Hugo 靜態網站</title>
      <link>https://chswei.github.io/post/programming/hugo/</link>
      <pubDate>Thu, 12 Jul 2018 22:36:43 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/programming/hugo/</guid>
      <description>第一次搭建個人網站，選擇了 Hugo。儘管官方文件寫得很詳細，但 Programming 新手如我在建立的過程中還是遇到了一些困難，因此紀錄一下，希望能幫到跟我同樣情況的人。
以下分為兩部分介紹：本地建立檔案、部署到 GitHub。(使用 MacOS) (2018/09/01 補充 Windows 本地建立檔案方法在最下面)
第一部分：本地建立檔案 老實說 Hugo 真的很人性化，簡單幾個步驟就能讓使用者建立網站的雛形。
1. 打開 terminal，安裝 Homebrew /usr/bin/ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34; 2. 安裝 Hugo brew install hugo 3. 建立新網站 hugo new site website-hugo cd website-hugo website-hugo 可以替換成任意名稱，但你也可以跟我一樣，避免麻煩。找到名為 website-hugo 的資料夾，觀察一下內部資料夾結構。
4. 新增主題 (theme)：此處以 Casper 為例 git clone https://github.com/vjeantet/hugo-theme-casper themes/casper 你也可以選其他主題，進到該主題的 GitHub repo，將上面的網址改成 repo 的網址、themes/casper 改成 themes/你的主題名稱。
5. 將 /themes/casper 中的 static 和 layouts 資料夾複製，取代根目錄中的 static 和 layouts 資料夾 6.</description>
    </item>
    
    <item>
      <title>Python 中 sys.argv[] 配合 Shell Script 的使用方法</title>
      <link>https://chswei.github.io/post/programming/sysargv-shell/</link>
      <pubDate>Thu, 12 Jul 2018 22:25:02 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/programming/sysargv-shell/</guid>
      <description>最近在寫李宏毅老師的 ML 課程作業時，第一次接觸了shell script，也終於弄懂 sys.argv[] 的用法。過程中看了網路上許多參考資料的介紹，總覺得對於我這個新手來說太過複雜，故在此稍作整理並紀錄。
第一步：建立含有 sys.argv[] 的 .py 文件 使用任意文字編輯器建立 .py 文件，如圖中的 test_code.py。
第二步：建立 .sh 文件 在 terminal 或 cmd 輸入以下指令：
touch shell_name touch 指令可以建立新的 .sh 文件，後面接你要的文件名稱，如圖中的 test_shell（注意這邊不用打副檔名 .sh）。
好的，到目前為止，資料夾中已有兩個檔案：test_code.py 和 test_shell.sh
接下來我們要在 test_shell.sh 中打一些東西：
#!/bin/bash python3 your_code.py $1...  #!/bin/bash 這行告訴系統以 bash（一種 shell）執行這個 .sh 檔。 python3 後面接要執行的 .py 文件，再後面接 $1、$2 … ，看你 .py 中 sys.argv[] 數字到多少就打到多少，因為 $1 之後會對應 sys.argv[1]、$2 會對應 sys.argv[2] … 以此類推。  第三步：傳遞參數 (passing arguments) 在 terminal 或 cmd 輸入以下指令：</description>
    </item>
    
    <item>
      <title>在 Jupyter Notebook 上安裝 R (Windows 10)</title>
      <link>https://chswei.github.io/post/programming/r-kernel-for-jupyter-notebook/</link>
      <pubDate>Thu, 12 Jul 2018 21:55:00 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/programming/r-kernel-for-jupyter-notebook/</guid>
      <description>最近為了某個目的，想在 Jupyter Notebook 上寫 R code。利用 IRkernel 就能達到這件事，然而在安裝的過程中發生了一些問題，因此做了很多搜尋，將操作步驟整理在此，希望能幫助到一些人，同時也紀錄自己對於電腦世界的懵懂無知。
安裝 IRkernel 的前提 (Requirements)  安裝好 R （我的版本是 3.4.1，若還有安裝 RStudio 更好）。 安裝好 Jupyter Notebook （我是用 Anaconda 安裝的）。  此路不通 (Not Work for Me) 一開始我按照這個網站的步驟操作，在 Anaconda Prompt 內打入：
conda update anaconda conda install -c r r-essentials 在筆電和桌電上試驗都在第二步出現了 Error，沒辦法安裝，查了 google 和 stackoverflow 都找不到解答。（不過好多東西我都看不懂，所以也有可能是有解的。）之後還在 YouTube 看別人怎麼安裝，但對我來說還是不成功。
解法 (My Solution) 後來在某影片中的某片段看到一個似乎是 IRkernel 的官方網址，按照裡面的方法後，就安裝成功了！（心得：看官方文件還是最準的 OTZ）
Step 1 在 RStudio 的 Console 內打入：
install.packages(c(&amp;#39;repr&amp;#39;, &amp;#39;IRdisplay&amp;#39;, &amp;#39;evaluate&amp;#39;, &amp;#39;crayon&amp;#39;, &amp;#39;pbdZMQ&amp;#39;, &amp;#39;devtools&amp;#39;, &amp;#39;uuid&amp;#39;, &amp;#39;digest&amp;#39;)) devtools::install_github(&amp;#39;IRkernel/IRkernel&amp;#39;) Step 2 (Wrong) 在 RStudio 中的 Console 內打入：</description>
    </item>
    
    <item>
      <title>為什麼 R 比 MS Excel 更適合做資料分析？</title>
      <link>https://chswei.github.io/post/programming/why-r/</link>
      <pubDate>Thu, 12 Jul 2018 17:08:36 +0800</pubDate>
      
      <guid>https://chswei.github.io/post/programming/why-r/</guid>
      <description>從六月中開始放暑假後，也學了快三個月的 R 語言。有一天我爸瞄到我正在打 code，就問這是什麼。我跟他簡單解釋說 R 是一個用來進行數據處理和分析的程式語言，沒想到他反問我為什麼不用 Excel 做就好。對耶！好問題！老實說，我之前並沒有仔細想過這件事，只是覺得學了一個程式語言好酷好潮，以後如果需要統計分析時就多了一個工具可以使用，如此而已。
平常使用 Excel 的頻率也不高，最多就是會使用常見函數和樞紐分析而已，R 也只有學了短短的 70 多天，討論這個題目其實說服力有點薄弱。不過對於剛踏入資料科學領域的我來說，這確實是個值得思考的問題，藉此了解各種工具的優缺點，未來也才能合理地運用它們。
網路上已經有不少人討論過這個問題了，但我想結合自己學習和使用的心得，以研究人員、資料科學家（而非一般人）的角度，將 R 比 Excel 優秀的部分，依據我個人有感程度分成以下八點敘述：
一、再現性 (Reproducibility) 某人用了某份數據做出了 A 結論，另一人也可以用相同的數據做出類似於 A 的結論，這就稱為再現性，是科學研究中十分重要的概念。 在 R 中，包含資料的下載、讀取、清理和分析等操作，都是藉由「程式碼 (code)」執行，因此每個步驟都扎扎實實地以程式碼的形式被紀錄下來（甚至可以加上註解讓他人容易理解）。別人只要照著程式碼 run 一遍，便可得到相同的結果。而另一方面，Excel 是利用圖形使用者介面 (GUI, Graphical User Interface) 進行大部分的工作，幾乎所有的操作都可以藉由「滑鼠點擊」完成（VBA 例外），雖然簡單、方便、直覺，但除非我們詳細記錄了每一個操作步驟，不然別人是很難一眼看出我們是如何進行分析而得出結果的。
二、自動化 自動化原本就是機器和電腦的優勢，R 可以讓人類教導機器，學習如何依照我們的想法，將單一且重複的工作自動完成，提升效率。當遇到相同格式的資料和數據時，我們可以使用同一份 R Script 進行處理及分析。反觀 Excel，因為是 GUI-based 的軟體，每個步驟都要經由人工點擊的方式進行，所以即使拿到同樣格式的資料，我們還是要從頭開始一步步處理。
三、開源 (Open Source) 相對於微軟的付費產品 Excel，R 作為一個開源的語言，每個人都能免費下載，使用者們也可以貢獻自己的智慧結晶，將修改過或是全新的函數寫成套件 (package)，擴充 R 的功能。2017 年初，CRAN 上的套件數量尚不足一萬個，但短短幾個月，已經上升到了 11418 個（截至 2017/09/15），而這個數目還不包含 Bioconductor 上的套件呢，可見使用 R 的社群仍持續蓬勃發展。
四、易於操作大型資料 大家應該多多少少都有遇過開啟 Excel 檔時，因為資料量過於龐大而當機的狀況。在現今這個充滿數據的時代，上萬筆、甚至上百萬筆的巨量數據集隨處可見，Excel 對於這種資料的處理可能就不是這麼適合。在 R 中，數據集匯入後，它會儲存在後台，儘管我們沒辦法看到看到資料的全貌（要另外輸入其他指令），但卻能加速資料操作的效率。</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://chswei.github.io/about/</link>
      <pubDate>Wed, 11 Jul 2018 23:21:12 +0800</pubDate>
      
      <guid>https://chswei.github.io/about/</guid>
      <description>醫學生，最近對資料科學產生興趣。
Medical student, interested in data science recently.</description>
    </item>
    
  </channel>
</rss>